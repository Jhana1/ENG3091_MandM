ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"I2C_INT.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.I2C_ISR,"ax",%progbits
  19              		.align	2
  20              		.global	I2C_ISR
  21              		.thumb
  22              		.thumb_func
  23              		.type	I2C_ISR, %function
  24              	I2C_ISR:
  25              	.LFB0:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\I2C_INT.c"
   1:.\Generated_Source\PSoC5/I2C_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/I2C_INT.c **** * File Name: I2C_INT.c
   3:.\Generated_Source\PSoC5/I2C_INT.c **** * Version 3.50
   4:.\Generated_Source\PSoC5/I2C_INT.c **** *
   5:.\Generated_Source\PSoC5/I2C_INT.c **** * Description:
   6:.\Generated_Source\PSoC5/I2C_INT.c **** *  This file provides the source code of Interrupt Service Routine (ISR)
   7:.\Generated_Source\PSoC5/I2C_INT.c **** *  for the I2C component.
   8:.\Generated_Source\PSoC5/I2C_INT.c **** *
   9:.\Generated_Source\PSoC5/I2C_INT.c **** ********************************************************************************
  10:.\Generated_Source\PSoC5/I2C_INT.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation. All rights reserved.
  11:.\Generated_Source\PSoC5/I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:.\Generated_Source\PSoC5/I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:.\Generated_Source\PSoC5/I2C_INT.c **** * the software package with which this file was provided.
  14:.\Generated_Source\PSoC5/I2C_INT.c **** *******************************************************************************/
  15:.\Generated_Source\PSoC5/I2C_INT.c **** 
  16:.\Generated_Source\PSoC5/I2C_INT.c **** #include "I2C_PVT.h"
  17:.\Generated_Source\PSoC5/I2C_INT.c **** 
  18:.\Generated_Source\PSoC5/I2C_INT.c **** 
  19:.\Generated_Source\PSoC5/I2C_INT.c **** /*******************************************************************************
  20:.\Generated_Source\PSoC5/I2C_INT.c **** *  Place your includes, defines and code here.
  21:.\Generated_Source\PSoC5/I2C_INT.c **** ********************************************************************************/
  22:.\Generated_Source\PSoC5/I2C_INT.c **** /* `#START I2C_ISR_intc` */
  23:.\Generated_Source\PSoC5/I2C_INT.c **** 
  24:.\Generated_Source\PSoC5/I2C_INT.c **** /* `#END` */
  25:.\Generated_Source\PSoC5/I2C_INT.c **** 
  26:.\Generated_Source\PSoC5/I2C_INT.c **** 
  27:.\Generated_Source\PSoC5/I2C_INT.c **** /*******************************************************************************
  28:.\Generated_Source\PSoC5/I2C_INT.c **** * Function Name: I2C_ISR
  29:.\Generated_Source\PSoC5/I2C_INT.c **** ********************************************************************************
  30:.\Generated_Source\PSoC5/I2C_INT.c **** *
  31:.\Generated_Source\PSoC5/I2C_INT.c **** * Summary:
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 2


  32:.\Generated_Source\PSoC5/I2C_INT.c **** *  The handler for the I2C interrupt. The slave and master operations are
  33:.\Generated_Source\PSoC5/I2C_INT.c **** *  handled here.
  34:.\Generated_Source\PSoC5/I2C_INT.c **** *
  35:.\Generated_Source\PSoC5/I2C_INT.c **** * Parameters:
  36:.\Generated_Source\PSoC5/I2C_INT.c **** *  None.
  37:.\Generated_Source\PSoC5/I2C_INT.c **** *
  38:.\Generated_Source\PSoC5/I2C_INT.c **** * Return:
  39:.\Generated_Source\PSoC5/I2C_INT.c **** *  None.
  40:.\Generated_Source\PSoC5/I2C_INT.c **** *
  41:.\Generated_Source\PSoC5/I2C_INT.c **** * Reentrant:
  42:.\Generated_Source\PSoC5/I2C_INT.c **** *  No.
  43:.\Generated_Source\PSoC5/I2C_INT.c **** *
  44:.\Generated_Source\PSoC5/I2C_INT.c **** *******************************************************************************/
  45:.\Generated_Source\PSoC5/I2C_INT.c **** CY_ISR(I2C_ISR)
  46:.\Generated_Source\PSoC5/I2C_INT.c **** {
  27              		.loc 1 46 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  47:.\Generated_Source\PSoC5/I2C_INT.c **** #if (I2C_MODE_SLAVE_ENABLED)
  48:.\Generated_Source\PSoC5/I2C_INT.c ****    uint8  tmp8;
  49:.\Generated_Source\PSoC5/I2C_INT.c **** #endif  /* (I2C_MODE_SLAVE_ENABLED) */
  50:.\Generated_Source\PSoC5/I2C_INT.c **** 
  51:.\Generated_Source\PSoC5/I2C_INT.c ****     uint8  tmpCsr;
  52:.\Generated_Source\PSoC5/I2C_INT.c **** 
  53:.\Generated_Source\PSoC5/I2C_INT.c **** #if(I2C_TIMEOUT_FF_ENABLED)
  54:.\Generated_Source\PSoC5/I2C_INT.c ****     if(0u != I2C_TimeoutGetStatus())
  55:.\Generated_Source\PSoC5/I2C_INT.c ****     {
  56:.\Generated_Source\PSoC5/I2C_INT.c ****         I2C_TimeoutReset();
  57:.\Generated_Source\PSoC5/I2C_INT.c ****         I2C_state = I2C_SM_EXIT_IDLE;
  58:.\Generated_Source\PSoC5/I2C_INT.c ****         /* I2C_CSR_REG should be cleared after reset */
  59:.\Generated_Source\PSoC5/I2C_INT.c ****     }
  60:.\Generated_Source\PSoC5/I2C_INT.c **** #endif /* (I2C_TIMEOUT_FF_ENABLED) */
  61:.\Generated_Source\PSoC5/I2C_INT.c **** 
  62:.\Generated_Source\PSoC5/I2C_INT.c **** 
  63:.\Generated_Source\PSoC5/I2C_INT.c ****     tmpCsr = I2C_CSR_REG;      /* Make copy as interrupts clear */
  39              		.loc 1 63 0
  40 0006 A64B     		ldr	r3, .L34
  41 0008 1B78     		ldrb	r3, [r3]
  42 000a FB71     		strb	r3, [r7, #7]
  64:.\Generated_Source\PSoC5/I2C_INT.c **** 
  65:.\Generated_Source\PSoC5/I2C_INT.c **** #if(I2C_MODE_MULTI_MASTER_SLAVE_ENABLED)
  66:.\Generated_Source\PSoC5/I2C_INT.c ****     if(I2C_CHECK_START_GEN(I2C_MCSR_REG))
  67:.\Generated_Source\PSoC5/I2C_INT.c ****     {
  68:.\Generated_Source\PSoC5/I2C_INT.c ****         I2C_CLEAR_START_GEN;
  69:.\Generated_Source\PSoC5/I2C_INT.c **** 
  70:.\Generated_Source\PSoC5/I2C_INT.c ****         /* Set transfer complete and error flags */
  71:.\Generated_Source\PSoC5/I2C_INT.c ****         I2C_mstrStatus |= (I2C_MSTAT_ERR_XFER |
  72:.\Generated_Source\PSoC5/I2C_INT.c ****                                         I2C_GET_MSTAT_CMPLT);
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 3


  73:.\Generated_Source\PSoC5/I2C_INT.c **** 
  74:.\Generated_Source\PSoC5/I2C_INT.c ****         /* Slave was addressed */
  75:.\Generated_Source\PSoC5/I2C_INT.c ****         I2C_state = I2C_SM_SLAVE;
  76:.\Generated_Source\PSoC5/I2C_INT.c ****     }
  77:.\Generated_Source\PSoC5/I2C_INT.c **** #endif /* (I2C_MODE_MULTI_MASTER_SLAVE_ENABLED) */
  78:.\Generated_Source\PSoC5/I2C_INT.c **** 
  79:.\Generated_Source\PSoC5/I2C_INT.c **** 
  80:.\Generated_Source\PSoC5/I2C_INT.c **** #if(I2C_MODE_MULTI_MASTER_ENABLED)
  81:.\Generated_Source\PSoC5/I2C_INT.c ****     if(I2C_CHECK_LOST_ARB(tmpCsr))
  82:.\Generated_Source\PSoC5/I2C_INT.c ****     {
  83:.\Generated_Source\PSoC5/I2C_INT.c ****         /* Set errors */
  84:.\Generated_Source\PSoC5/I2C_INT.c ****         I2C_mstrStatus |= (I2C_MSTAT_ERR_XFER     |
  85:.\Generated_Source\PSoC5/I2C_INT.c ****                                         I2C_MSTAT_ERR_ARB_LOST |
  86:.\Generated_Source\PSoC5/I2C_INT.c ****                                         I2C_GET_MSTAT_CMPLT);
  87:.\Generated_Source\PSoC5/I2C_INT.c **** 
  88:.\Generated_Source\PSoC5/I2C_INT.c ****         I2C_DISABLE_INT_ON_STOP; /* Interrupt on Stop is enabled by write */
  89:.\Generated_Source\PSoC5/I2C_INT.c **** 
  90:.\Generated_Source\PSoC5/I2C_INT.c ****         #if(I2C_MODE_MULTI_MASTER_SLAVE_ENABLED)
  91:.\Generated_Source\PSoC5/I2C_INT.c ****             if(I2C_CHECK_ADDRESS_STS(tmpCsr))
  92:.\Generated_Source\PSoC5/I2C_INT.c ****             {
  93:.\Generated_Source\PSoC5/I2C_INT.c ****                 /* Slave was addressed */
  94:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_state = I2C_SM_SLAVE;
  95:.\Generated_Source\PSoC5/I2C_INT.c ****             }
  96:.\Generated_Source\PSoC5/I2C_INT.c ****             else
  97:.\Generated_Source\PSoC5/I2C_INT.c ****             {
  98:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_BUS_RELEASE;
  99:.\Generated_Source\PSoC5/I2C_INT.c **** 
 100:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_state = I2C_SM_EXIT_IDLE;
 101:.\Generated_Source\PSoC5/I2C_INT.c ****             }
 102:.\Generated_Source\PSoC5/I2C_INT.c ****         #else
 103:.\Generated_Source\PSoC5/I2C_INT.c ****             I2C_BUS_RELEASE;
 104:.\Generated_Source\PSoC5/I2C_INT.c **** 
 105:.\Generated_Source\PSoC5/I2C_INT.c ****             I2C_state = I2C_SM_EXIT_IDLE;
 106:.\Generated_Source\PSoC5/I2C_INT.c **** 
 107:.\Generated_Source\PSoC5/I2C_INT.c ****         #endif /* (I2C_MODE_MULTI_MASTER_SLAVE_ENABLED) */
 108:.\Generated_Source\PSoC5/I2C_INT.c ****     }
 109:.\Generated_Source\PSoC5/I2C_INT.c **** #endif /* (I2C_MODE_MULTI_MASTER_ENABLED) */
 110:.\Generated_Source\PSoC5/I2C_INT.c **** 
 111:.\Generated_Source\PSoC5/I2C_INT.c ****     /* Check for master operation mode */
 112:.\Generated_Source\PSoC5/I2C_INT.c ****     if(I2C_CHECK_SM_MASTER)
  43              		.loc 1 112 0
  44 000c A54B     		ldr	r3, .L34+4
  45 000e 1B78     		ldrb	r3, [r3]
  46 0010 DBB2     		uxtb	r3, r3
  47 0012 03F04003 		and	r3, r3, #64
  48 0016 DBB2     		uxtb	r3, r3
  49 0018 002B     		cmp	r3, #0
  50 001a 00F0CD81 		beq	.L2
 113:.\Generated_Source\PSoC5/I2C_INT.c ****     {
 114:.\Generated_Source\PSoC5/I2C_INT.c ****     #if(I2C_MODE_MASTER_ENABLED)
 115:.\Generated_Source\PSoC5/I2C_INT.c ****         if(I2C_CHECK_BYTE_COMPLETE(tmpCsr))
  51              		.loc 1 115 0
  52 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  53 0020 03F00103 		and	r3, r3, #1
  54 0024 002B     		cmp	r3, #0
  55 0026 00F0A581 		beq	.L3
 116:.\Generated_Source\PSoC5/I2C_INT.c ****         {
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 4


 117:.\Generated_Source\PSoC5/I2C_INT.c ****             switch (I2C_state)
  56              		.loc 1 117 0
  57 002a 9E4B     		ldr	r3, .L34+4
  58 002c 1B78     		ldrb	r3, [r3]
  59 002e DBB2     		uxtb	r3, r3
  60 0030 453B     		subs	r3, r3, #69
  61 0032 052B     		cmp	r3, #5
  62 0034 00F29A81 		bhi	.L4
  63 0038 01A2     		adr	r2, .L6
  64 003a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
  65 003e 00BF     		.p2align 2
  66              	.L6:
  67 0040 59000000 		.word	.L5+1
  68 0044 9F010000 		.word	.L7+1
  69 0048 6D030000 		.word	.L4+1
  70 004c 6D030000 		.word	.L4+1
  71 0050 59000000 		.word	.L5+1
  72 0054 D5020000 		.word	.L8+1
  73              		.p2align 1
  74              	.L5:
 118:.\Generated_Source\PSoC5/I2C_INT.c ****             {
 119:.\Generated_Source\PSoC5/I2C_INT.c ****             case I2C_SM_MSTR_WR_ADDR:  /* After address is sent, write data */
 120:.\Generated_Source\PSoC5/I2C_INT.c ****             case I2C_SM_MSTR_RD_ADDR:  /* After address is sent, read data */
 121:.\Generated_Source\PSoC5/I2C_INT.c **** 
 122:.\Generated_Source\PSoC5/I2C_INT.c ****                 tmpCsr &= ((uint8) ~I2C_CSR_STOP_STATUS); /* Clear Stop bit history on address phas
  75              		.loc 1 122 0
  76 0058 FB79     		ldrb	r3, [r7, #7]
  77 005a 23F02003 		bic	r3, r3, #32
  78 005e FB71     		strb	r3, [r7, #7]
 123:.\Generated_Source\PSoC5/I2C_INT.c **** 
 124:.\Generated_Source\PSoC5/I2C_INT.c ****                 if(I2C_CHECK_ADDR_ACK(tmpCsr))
  79              		.loc 1 124 0
  80 0060 FB79     		ldrb	r3, [r7, #7]
  81 0062 03F00A03 		and	r3, r3, #10
  82 0066 DBB2     		uxtb	r3, r3
  83 0068 082B     		cmp	r3, #8
  84 006a 54D1     		bne	.L9
 125:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 126:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Setup for transmit or receive of data */
 127:.\Generated_Source\PSoC5/I2C_INT.c ****                     if(I2C_state == I2C_SM_MSTR_WR_ADDR)   /* TRANSMIT data */
  85              		.loc 1 127 0
  86 006c 8D4B     		ldr	r3, .L34+4
  87 006e 1B78     		ldrb	r3, [r3]
  88 0070 DBB2     		uxtb	r3, r3
  89 0072 452B     		cmp	r3, #69
  90 0074 42D1     		bne	.L10
 128:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 129:.\Generated_Source\PSoC5/I2C_INT.c ****                         /* Check if at least one byte to transfer */
 130:.\Generated_Source\PSoC5/I2C_INT.c ****                         if(I2C_mstrWrBufSize > 0u)
  91              		.loc 1 130 0
  92 0076 8C4B     		ldr	r3, .L34+8
  93 0078 1B78     		ldrb	r3, [r3]
  94 007a DBB2     		uxtb	r3, r3
  95 007c 002B     		cmp	r3, #0
  96 007e 15D0     		beq	.L11
 131:.\Generated_Source\PSoC5/I2C_INT.c ****                         {
 132:.\Generated_Source\PSoC5/I2C_INT.c ****                             /* Load the 1st data byte */
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 5


 133:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_DATA_REG = I2C_mstrWrBufPtr[0u];
  97              		.loc 1 133 0
  98 0080 8A4B     		ldr	r3, .L34+12
  99 0082 8B4A     		ldr	r2, .L34+16
 100 0084 1268     		ldr	r2, [r2]
 101 0086 1278     		ldrb	r2, [r2]
 102 0088 D2B2     		uxtb	r2, r2
 103 008a 1A70     		strb	r2, [r3]
 134:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_TRANSMIT_DATA;
 104              		.loc 1 134 0
 105 008c 894B     		ldr	r3, .L34+20
 106 008e 0622     		movs	r2, #6
 107 0090 1A70     		strb	r2, [r3]
 108 0092 894B     		ldr	r3, .L34+24
 109 0094 FF22     		movs	r2, #255
 110 0096 1A70     		strb	r2, [r3]
 111 0098 884B     		ldr	r3, .L34+28
 112 009a 0022     		movs	r2, #0
 113 009c 1A70     		strb	r2, [r3]
 135:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_mstrWrBufIndex = 1u;   /* Set index to 2nd element */
 114              		.loc 1 135 0
 115 009e 884B     		ldr	r3, .L34+32
 116 00a0 0122     		movs	r2, #1
 117 00a2 1A70     		strb	r2, [r3]
 136:.\Generated_Source\PSoC5/I2C_INT.c **** 
 137:.\Generated_Source\PSoC5/I2C_INT.c ****                             /* Set transmit state until done */
 138:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_state = I2C_SM_MSTR_WR_DATA;
 118              		.loc 1 138 0
 119 00a4 7F4B     		ldr	r3, .L34+4
 120 00a6 4622     		movs	r2, #70
 121 00a8 1A70     		strb	r2, [r3]
 122 00aa 77E0     		b	.L15
 123              	.L11:
 139:.\Generated_Source\PSoC5/I2C_INT.c ****                         }
 140:.\Generated_Source\PSoC5/I2C_INT.c ****                         /* End of buffer: complete writing */
 141:.\Generated_Source\PSoC5/I2C_INT.c ****                         else if(I2C_CHECK_NO_STOP(I2C_mstrControl))
 124              		.loc 1 141 0
 125 00ac 854B     		ldr	r3, .L34+36
 126 00ae 1B78     		ldrb	r3, [r3]
 127 00b0 DBB2     		uxtb	r3, r3
 128 00b2 03F00203 		and	r3, r3, #2
 129 00b6 002B     		cmp	r3, #0
 130 00b8 0ED0     		beq	.L13
 142:.\Generated_Source\PSoC5/I2C_INT.c ****                         {
 143:.\Generated_Source\PSoC5/I2C_INT.c ****                             /* Set write complete and master halted */
 144:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_mstrStatus |= (I2C_MSTAT_XFER_HALT |
 131              		.loc 1 144 0
 132 00ba 834B     		ldr	r3, .L34+40
 133 00bc 1B78     		ldrb	r3, [r3]
 134 00be DBB2     		uxtb	r3, r3
 135 00c0 43F00A03 		orr	r3, r3, #10
 136 00c4 DAB2     		uxtb	r2, r3
 137 00c6 804B     		ldr	r3, .L34+40
 138 00c8 1A70     		strb	r2, [r3]
 145:.\Generated_Source\PSoC5/I2C_INT.c ****                                                             I2C_MSTAT_WR_CMPLT);
 146:.\Generated_Source\PSoC5/I2C_INT.c **** 
 147:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_state = I2C_SM_MSTR_HALT; /* Expect ReStart */
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 6


 139              		.loc 1 147 0
 140 00ca 764B     		ldr	r3, .L34+4
 141 00cc 6022     		movs	r2, #96
 142 00ce 1A70     		strb	r2, [r3]
 148:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_DisableInt();
 143              		.loc 1 148 0
 144 00d0 7E4B     		ldr	r3, .L34+44
 145 00d2 1022     		movs	r2, #16
 146 00d4 1A60     		str	r2, [r3]
 147 00d6 61E0     		b	.L15
 148              	.L13:
 149:.\Generated_Source\PSoC5/I2C_INT.c ****                         }
 150:.\Generated_Source\PSoC5/I2C_INT.c ****                         else
 151:.\Generated_Source\PSoC5/I2C_INT.c ****                         {
 152:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_ENABLE_INT_ON_STOP; /* Enable interrupt on Stop, to catch it */
 149              		.loc 1 152 0
 150 00d8 7D4B     		ldr	r3, .L34+48
 151 00da 7D4A     		ldr	r2, .L34+48
 152 00dc 1278     		ldrb	r2, [r2]
 153 00de D2B2     		uxtb	r2, r2
 154 00e0 42F02002 		orr	r2, r2, #32
 155 00e4 D2B2     		uxtb	r2, r2
 156 00e6 1A70     		strb	r2, [r3]
 153:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_GENERATE_STOP;
 157              		.loc 1 153 0
 158 00e8 724B     		ldr	r3, .L34+20
 159 00ea 5222     		movs	r2, #82
 160 00ec 1A70     		strb	r2, [r3]
 161 00ee 724B     		ldr	r3, .L34+24
 162 00f0 FF22     		movs	r2, #255
 163 00f2 1A70     		strb	r2, [r3]
 164 00f4 714B     		ldr	r3, .L34+28
 165 00f6 0022     		movs	r2, #0
 166 00f8 1A70     		strb	r2, [r3]
 167 00fa 4FE0     		b	.L15
 168              	.L10:
 154:.\Generated_Source\PSoC5/I2C_INT.c ****                         }
 155:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 156:.\Generated_Source\PSoC5/I2C_INT.c ****                     else  /* Master receive data */
 157:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 158:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_READY_TO_READ; /* Release bus to read data */
 169              		.loc 1 158 0
 170 00fc 6D4B     		ldr	r3, .L34+20
 171 00fe 0222     		movs	r2, #2
 172 0100 1A70     		strb	r2, [r3]
 173 0102 6D4B     		ldr	r3, .L34+24
 174 0104 FF22     		movs	r2, #255
 175 0106 1A70     		strb	r2, [r3]
 176 0108 6C4B     		ldr	r3, .L34+28
 177 010a 0022     		movs	r2, #0
 178 010c 1A70     		strb	r2, [r3]
 159:.\Generated_Source\PSoC5/I2C_INT.c **** 
 160:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_state  = I2C_SM_MSTR_RD_DATA;
 179              		.loc 1 160 0
 180 010e 654B     		ldr	r3, .L34+4
 181 0110 4A22     		movs	r2, #74
 182 0112 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 7


 161:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 162:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 163:.\Generated_Source\PSoC5/I2C_INT.c ****                 /* Address is NACKed */
 164:.\Generated_Source\PSoC5/I2C_INT.c ****                 else if(I2C_CHECK_ADDR_NAK(tmpCsr))
 165:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 166:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Set Address NAK error */
 167:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_mstrStatus |= (I2C_MSTAT_ERR_XFER |
 168:.\Generated_Source\PSoC5/I2C_INT.c ****                                                     I2C_MSTAT_ERR_ADDR_NAK);
 169:.\Generated_Source\PSoC5/I2C_INT.c **** 
 170:.\Generated_Source\PSoC5/I2C_INT.c ****                     if(I2C_CHECK_NO_STOP(I2C_mstrControl))
 171:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 172:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_mstrStatus |= (I2C_MSTAT_XFER_HALT |
 173:.\Generated_Source\PSoC5/I2C_INT.c ****                                                         I2C_GET_MSTAT_CMPLT);
 174:.\Generated_Source\PSoC5/I2C_INT.c **** 
 175:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_state = I2C_SM_MSTR_HALT; /* Expect RESTART */
 176:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_DisableInt();
 177:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 178:.\Generated_Source\PSoC5/I2C_INT.c ****                     else  /* Do normal Stop */
 179:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 180:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_ENABLE_INT_ON_STOP; /* Enable interrupt on Stop, to catch it */
 181:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_GENERATE_STOP;
 182:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 183:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 184:.\Generated_Source\PSoC5/I2C_INT.c ****                 else
 185:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 186:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Address phase is not set for some reason: error */
 187:.\Generated_Source\PSoC5/I2C_INT.c ****                     #if(I2C_TIMEOUT_ENABLED)
 188:.\Generated_Source\PSoC5/I2C_INT.c ****                         /* Exit interrupt to take chance for timeout timer to handle this case */
 189:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_DisableInt();
 190:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_ClearPendingInt();
 191:.\Generated_Source\PSoC5/I2C_INT.c ****                     #else
 192:.\Generated_Source\PSoC5/I2C_INT.c ****                         /* Block execution flow: unexpected condition */
 193:.\Generated_Source\PSoC5/I2C_INT.c ****                         CYASSERT(0u != 0u);
 194:.\Generated_Source\PSoC5/I2C_INT.c ****                     #endif /* (I2C_TIMEOUT_ENABLED) */
 195:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 196:.\Generated_Source\PSoC5/I2C_INT.c ****                 break;
 183              		.loc 1 196 0
 184 0114 2EE1     		b	.L3
 185              	.L9:
 164:.\Generated_Source\PSoC5/I2C_INT.c ****                 else if(I2C_CHECK_ADDR_NAK(tmpCsr))
 186              		.loc 1 164 0
 187 0116 FB79     		ldrb	r3, [r7, #7]
 188 0118 03F00A03 		and	r3, r3, #10
 189 011c DBB2     		uxtb	r3, r3
 190 011e 0A2B     		cmp	r3, #10
 191 0120 38D1     		bne	.L16
 167:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_mstrStatus |= (I2C_MSTAT_ERR_XFER |
 192              		.loc 1 167 0
 193 0122 694B     		ldr	r3, .L34+40
 194 0124 1B78     		ldrb	r3, [r3]
 195 0126 DBB2     		uxtb	r3, r3
 196 0128 63F05F03 		orn	r3, r3, #95
 197 012c DAB2     		uxtb	r2, r3
 198 012e 664B     		ldr	r3, .L34+40
 199 0130 1A70     		strb	r2, [r3]
 170:.\Generated_Source\PSoC5/I2C_INT.c ****                     if(I2C_CHECK_NO_STOP(I2C_mstrControl))
 200              		.loc 1 170 0
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 8


 201 0132 644B     		ldr	r3, .L34+36
 202 0134 1B78     		ldrb	r3, [r3]
 203 0136 DBB2     		uxtb	r3, r3
 204 0138 03F00203 		and	r3, r3, #2
 205 013c 002B     		cmp	r3, #0
 206 013e 17D0     		beq	.L17
 173:.\Generated_Source\PSoC5/I2C_INT.c ****                                                         I2C_GET_MSTAT_CMPLT);
 207              		.loc 1 173 0
 208 0140 584B     		ldr	r3, .L34+4
 209 0142 1B78     		ldrb	r3, [r3]
 210 0144 DBB2     		uxtb	r3, r3
 211 0146 03F00803 		and	r3, r3, #8
 172:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_mstrStatus |= (I2C_MSTAT_XFER_HALT |
 212              		.loc 1 172 0
 213 014a 002B     		cmp	r3, #0
 214 014c 01D0     		beq	.L18
 172:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_mstrStatus |= (I2C_MSTAT_XFER_HALT |
 215              		.loc 1 172 0 is_stmt 0 discriminator 1
 216 014e 0923     		movs	r3, #9
 217 0150 00E0     		b	.L19
 218              	.L18:
 172:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_mstrStatus |= (I2C_MSTAT_XFER_HALT |
 219              		.loc 1 172 0 discriminator 2
 220 0152 0A23     		movs	r3, #10
 221              	.L19:
 172:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_mstrStatus |= (I2C_MSTAT_XFER_HALT |
 222              		.loc 1 172 0 discriminator 3
 223 0154 5C4A     		ldr	r2, .L34+40
 224 0156 1278     		ldrb	r2, [r2]
 225 0158 D2B2     		uxtb	r2, r2
 226 015a 1343     		orrs	r3, r3, r2
 227 015c DAB2     		uxtb	r2, r3
 228 015e 5A4B     		ldr	r3, .L34+40
 229 0160 1A70     		strb	r2, [r3]
 175:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_state = I2C_SM_MSTR_HALT; /* Expect RESTART */
 230              		.loc 1 175 0 is_stmt 1 discriminator 3
 231 0162 504B     		ldr	r3, .L34+4
 232 0164 6022     		movs	r2, #96
 233 0166 1A70     		strb	r2, [r3]
 176:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_DisableInt();
 234              		.loc 1 176 0 discriminator 3
 235 0168 584B     		ldr	r3, .L34+44
 236 016a 1022     		movs	r2, #16
 237 016c 1A60     		str	r2, [r3]
 238 016e 15E0     		b	.L15
 239              	.L17:
 180:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_ENABLE_INT_ON_STOP; /* Enable interrupt on Stop, to catch it */
 240              		.loc 1 180 0
 241 0170 574B     		ldr	r3, .L34+48
 242 0172 574A     		ldr	r2, .L34+48
 243 0174 1278     		ldrb	r2, [r2]
 244 0176 D2B2     		uxtb	r2, r2
 245 0178 42F02002 		orr	r2, r2, #32
 246 017c D2B2     		uxtb	r2, r2
 247 017e 1A70     		strb	r2, [r3]
 181:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_GENERATE_STOP;
 248              		.loc 1 181 0
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 9


 249 0180 4C4B     		ldr	r3, .L34+20
 250 0182 5222     		movs	r2, #82
 251 0184 1A70     		strb	r2, [r3]
 252 0186 4C4B     		ldr	r3, .L34+24
 253 0188 FF22     		movs	r2, #255
 254 018a 1A70     		strb	r2, [r3]
 255 018c 4B4B     		ldr	r3, .L34+28
 256 018e 0022     		movs	r2, #0
 257 0190 1A70     		strb	r2, [r3]
 258              		.loc 1 196 0
 259 0192 EFE0     		b	.L3
 260              	.L16:
 193:.\Generated_Source\PSoC5/I2C_INT.c ****                         CYASSERT(0u != 0u);
 261              		.loc 1 193 0 discriminator 1
 262 0194 0020     		movs	r0, #0
 263 0196 FFF7FEFF 		bl	CyHalt
 264              		.loc 1 196 0 discriminator 1
 265 019a EBE0     		b	.L3
 266              	.L15:
 267              		.loc 1 196 0 is_stmt 0
 268 019c EAE0     		b	.L3
 269              	.L7:
 197:.\Generated_Source\PSoC5/I2C_INT.c **** 
 198:.\Generated_Source\PSoC5/I2C_INT.c ****             case I2C_SM_MSTR_WR_DATA:
 199:.\Generated_Source\PSoC5/I2C_INT.c **** 
 200:.\Generated_Source\PSoC5/I2C_INT.c ****                 if(I2C_CHECK_DATA_ACK(tmpCsr))
 270              		.loc 1 200 0 is_stmt 1
 271 019e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 272 01a0 03F00203 		and	r3, r3, #2
 273 01a4 002B     		cmp	r3, #0
 274 01a6 4AD1     		bne	.L21
 201:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 202:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Check if end of buffer */
 203:.\Generated_Source\PSoC5/I2C_INT.c ****                     if(I2C_mstrWrBufIndex  < I2C_mstrWrBufSize)
 275              		.loc 1 203 0
 276 01a8 454B     		ldr	r3, .L34+32
 277 01aa 1B78     		ldrb	r3, [r3]
 278 01ac DAB2     		uxtb	r2, r3
 279 01ae 3E4B     		ldr	r3, .L34+8
 280 01b0 1B78     		ldrb	r3, [r3]
 281 01b2 DBB2     		uxtb	r3, r3
 282 01b4 9A42     		cmp	r2, r3
 283 01b6 1AD2     		bcs	.L22
 204:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 205:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_DATA_REG =
 284              		.loc 1 205 0
 285 01b8 3C4B     		ldr	r3, .L34+12
 206:.\Generated_Source\PSoC5/I2C_INT.c ****                                                  I2C_mstrWrBufPtr[I2C_mstrWrBufIndex];
 286              		.loc 1 206 0
 287 01ba 3D4A     		ldr	r2, .L34+16
 288 01bc 1168     		ldr	r1, [r2]
 289 01be 404A     		ldr	r2, .L34+32
 290 01c0 1278     		ldrb	r2, [r2]
 291 01c2 D2B2     		uxtb	r2, r2
 292 01c4 0A44     		add	r2, r2, r1
 293 01c6 1278     		ldrb	r2, [r2]
 294 01c8 D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 10


 205:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_DATA_REG =
 295              		.loc 1 205 0
 296 01ca 1A70     		strb	r2, [r3]
 207:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_TRANSMIT_DATA;
 297              		.loc 1 207 0
 298 01cc 394B     		ldr	r3, .L34+20
 299 01ce 0622     		movs	r2, #6
 300 01d0 1A70     		strb	r2, [r3]
 301 01d2 394B     		ldr	r3, .L34+24
 302 01d4 FF22     		movs	r2, #255
 303 01d6 1A70     		strb	r2, [r3]
 304 01d8 384B     		ldr	r3, .L34+28
 305 01da 0022     		movs	r2, #0
 306 01dc 1A70     		strb	r2, [r3]
 208:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_mstrWrBufIndex++;
 307              		.loc 1 208 0
 308 01de 384B     		ldr	r3, .L34+32
 309 01e0 1B78     		ldrb	r3, [r3]
 310 01e2 DBB2     		uxtb	r3, r3
 311 01e4 0133     		adds	r3, r3, #1
 312 01e6 DAB2     		uxtb	r2, r3
 313 01e8 354B     		ldr	r3, .L34+32
 314 01ea 1A70     		strb	r2, [r3]
 315 01ec 57E0     		b	.L25
 316              	.L22:
 209:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 210:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* End of buffer: complete writing */
 211:.\Generated_Source\PSoC5/I2C_INT.c ****                     else if(I2C_CHECK_NO_STOP(I2C_mstrControl))
 317              		.loc 1 211 0
 318 01ee 354B     		ldr	r3, .L34+36
 319 01f0 1B78     		ldrb	r3, [r3]
 320 01f2 DBB2     		uxtb	r3, r3
 321 01f4 03F00203 		and	r3, r3, #2
 322 01f8 002B     		cmp	r3, #0
 323 01fa 0ED0     		beq	.L24
 212:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 213:.\Generated_Source\PSoC5/I2C_INT.c ****                         /* Set write complete and master halted */
 214:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_mstrStatus |= (I2C_MSTAT_XFER_HALT |
 324              		.loc 1 214 0
 325 01fc 324B     		ldr	r3, .L34+40
 326 01fe 1B78     		ldrb	r3, [r3]
 327 0200 DBB2     		uxtb	r3, r3
 328 0202 43F00A03 		orr	r3, r3, #10
 329 0206 DAB2     		uxtb	r2, r3
 330 0208 2F4B     		ldr	r3, .L34+40
 331 020a 1A70     		strb	r2, [r3]
 215:.\Generated_Source\PSoC5/I2C_INT.c ****                                                         I2C_MSTAT_WR_CMPLT);
 216:.\Generated_Source\PSoC5/I2C_INT.c **** 
 217:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_state = I2C_SM_MSTR_HALT;    /* Expect restart */
 332              		.loc 1 217 0
 333 020c 254B     		ldr	r3, .L34+4
 334 020e 6022     		movs	r2, #96
 335 0210 1A70     		strb	r2, [r3]
 218:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_DisableInt();
 336              		.loc 1 218 0
 337 0212 2E4B     		ldr	r3, .L34+44
 338 0214 1022     		movs	r2, #16
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 11


 339 0216 1A60     		str	r2, [r3]
 340 0218 41E0     		b	.L25
 341              	.L24:
 219:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 220:.\Generated_Source\PSoC5/I2C_INT.c ****                     else  /* Do normal Stop */
 221:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 222:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_ENABLE_INT_ON_STOP;    /* Enable interrupt on Stop, to catch it */
 342              		.loc 1 222 0
 343 021a 2D4B     		ldr	r3, .L34+48
 344 021c 2C4A     		ldr	r2, .L34+48
 345 021e 1278     		ldrb	r2, [r2]
 346 0220 D2B2     		uxtb	r2, r2
 347 0222 42F02002 		orr	r2, r2, #32
 348 0226 D2B2     		uxtb	r2, r2
 349 0228 1A70     		strb	r2, [r3]
 223:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_GENERATE_STOP;
 350              		.loc 1 223 0
 351 022a 224B     		ldr	r3, .L34+20
 352 022c 5222     		movs	r2, #82
 353 022e 1A70     		strb	r2, [r3]
 354 0230 214B     		ldr	r3, .L34+24
 355 0232 FF22     		movs	r2, #255
 356 0234 1A70     		strb	r2, [r3]
 357 0236 214B     		ldr	r3, .L34+28
 358 0238 0022     		movs	r2, #0
 359 023a 1A70     		strb	r2, [r3]
 224:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 225:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 226:.\Generated_Source\PSoC5/I2C_INT.c ****                 /* Last byte NAKed: end writing */
 227:.\Generated_Source\PSoC5/I2C_INT.c ****                 else if(I2C_CHECK_NO_STOP(I2C_mstrControl))
 228:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 229:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Set write complete, short transfer and master halted */
 230:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_mstrStatus |= (I2C_MSTAT_ERR_XFER       |
 231:.\Generated_Source\PSoC5/I2C_INT.c ****                                                     I2C_MSTAT_ERR_SHORT_XFER |
 232:.\Generated_Source\PSoC5/I2C_INT.c ****                                                     I2C_MSTAT_XFER_HALT      |
 233:.\Generated_Source\PSoC5/I2C_INT.c ****                                                     I2C_MSTAT_WR_CMPLT);
 234:.\Generated_Source\PSoC5/I2C_INT.c **** 
 235:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_state = I2C_SM_MSTR_HALT;    /* Expect ReStart */
 236:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_DisableInt();
 237:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 238:.\Generated_Source\PSoC5/I2C_INT.c ****                 else  /* Do normal Stop */
 239:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 240:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_ENABLE_INT_ON_STOP;    /* Enable interrupt on Stop, to catch it */
 241:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_GENERATE_STOP;
 242:.\Generated_Source\PSoC5/I2C_INT.c **** 
 243:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Set short transfer and error flag */
 244:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_mstrStatus |= (I2C_MSTAT_ERR_SHORT_XFER |
 245:.\Generated_Source\PSoC5/I2C_INT.c ****                                                     I2C_MSTAT_ERR_XFER);
 246:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 247:.\Generated_Source\PSoC5/I2C_INT.c **** 
 248:.\Generated_Source\PSoC5/I2C_INT.c ****                 break;
 360              		.loc 1 248 0
 361 023c 9AE0     		b	.L3
 362              	.L21:
 227:.\Generated_Source\PSoC5/I2C_INT.c ****                 else if(I2C_CHECK_NO_STOP(I2C_mstrControl))
 363              		.loc 1 227 0
 364 023e 214B     		ldr	r3, .L34+36
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 12


 365 0240 1B78     		ldrb	r3, [r3]
 366 0242 DBB2     		uxtb	r3, r3
 367 0244 03F00203 		and	r3, r3, #2
 368 0248 002B     		cmp	r3, #0
 369 024a 0ED0     		beq	.L26
 230:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_mstrStatus |= (I2C_MSTAT_ERR_XFER       |
 370              		.loc 1 230 0
 371 024c 1E4B     		ldr	r3, .L34+40
 372 024e 1B78     		ldrb	r3, [r3]
 373 0250 DBB2     		uxtb	r3, r3
 374 0252 63F06503 		orn	r3, r3, #101
 375 0256 DAB2     		uxtb	r2, r3
 376 0258 1B4B     		ldr	r3, .L34+40
 377 025a 1A70     		strb	r2, [r3]
 235:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_state = I2C_SM_MSTR_HALT;    /* Expect ReStart */
 378              		.loc 1 235 0
 379 025c 114B     		ldr	r3, .L34+4
 380 025e 6022     		movs	r2, #96
 381 0260 1A70     		strb	r2, [r3]
 236:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_DisableInt();
 382              		.loc 1 236 0
 383 0262 1A4B     		ldr	r3, .L34+44
 384 0264 1022     		movs	r2, #16
 385 0266 1A60     		str	r2, [r3]
 386 0268 19E0     		b	.L25
 387              	.L26:
 240:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_ENABLE_INT_ON_STOP;    /* Enable interrupt on Stop, to catch it */
 388              		.loc 1 240 0
 389 026a 194B     		ldr	r3, .L34+48
 390 026c 184A     		ldr	r2, .L34+48
 391 026e 1278     		ldrb	r2, [r2]
 392 0270 D2B2     		uxtb	r2, r2
 393 0272 42F02002 		orr	r2, r2, #32
 394 0276 D2B2     		uxtb	r2, r2
 395 0278 1A70     		strb	r2, [r3]
 241:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_GENERATE_STOP;
 396              		.loc 1 241 0
 397 027a 0E4B     		ldr	r3, .L34+20
 398 027c 5222     		movs	r2, #82
 399 027e 1A70     		strb	r2, [r3]
 400 0280 0D4B     		ldr	r3, .L34+24
 401 0282 FF22     		movs	r2, #255
 402 0284 1A70     		strb	r2, [r3]
 403 0286 0D4B     		ldr	r3, .L34+28
 404 0288 0022     		movs	r2, #0
 405 028a 1A70     		strb	r2, [r3]
 244:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_mstrStatus |= (I2C_MSTAT_ERR_SHORT_XFER |
 406              		.loc 1 244 0
 407 028c 0E4B     		ldr	r3, .L34+40
 408 028e 1B78     		ldrb	r3, [r3]
 409 0290 DBB2     		uxtb	r3, r3
 410 0292 63F06F03 		orn	r3, r3, #111
 411 0296 DAB2     		uxtb	r2, r3
 412 0298 0B4B     		ldr	r3, .L34+40
 413 029a 1A70     		strb	r2, [r3]
 414              		.loc 1 248 0
 415 029c 6AE0     		b	.L3
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 13


 416              	.L25:
 417 029e 69E0     		b	.L3
 418              	.L35:
 419              		.align	2
 420              	.L34:
 421 02a0 6B640040 		.word	1073767531
 422 02a4 00000000 		.word	I2C_state
 423 02a8 00000000 		.word	I2C_mstrWrBufSize
 424 02ac 0F640040 		.word	1073767439
 425 02b0 00000000 		.word	I2C_mstrWrBufPtr
 426 02b4 73640040 		.word	1073767539
 427 02b8 1F640040 		.word	1073767455
 428 02bc 5F640040 		.word	1073767519
 429 02c0 00000000 		.word	I2C_mstrWrBufIndex
 430 02c4 00000000 		.word	I2C_mstrControl
 431 02c8 00000000 		.word	I2C_mstrStatus
 432 02cc 80E100E0 		.word	-536813184
 433 02d0 8B640040 		.word	1073767563
 434              	.L8:
 249:.\Generated_Source\PSoC5/I2C_INT.c **** 
 250:.\Generated_Source\PSoC5/I2C_INT.c ****             case I2C_SM_MSTR_RD_DATA:
 251:.\Generated_Source\PSoC5/I2C_INT.c **** 
 252:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_mstrRdBufPtr[I2C_mstrRdBufIndex] = I2C_DATA_REG;
 435              		.loc 1 252 0
 436 02d4 3F4B     		ldr	r3, .L36
 437 02d6 1A68     		ldr	r2, [r3]
 438 02d8 3F4B     		ldr	r3, .L36+4
 439 02da 1B78     		ldrb	r3, [r3]
 440 02dc DBB2     		uxtb	r3, r3
 441 02de 1344     		add	r3, r3, r2
 442 02e0 3E4A     		ldr	r2, .L36+8
 443 02e2 1278     		ldrb	r2, [r2]
 444 02e4 D2B2     		uxtb	r2, r2
 445 02e6 1A70     		strb	r2, [r3]
 253:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_mstrRdBufIndex++;
 446              		.loc 1 253 0
 447 02e8 3B4B     		ldr	r3, .L36+4
 448 02ea 1B78     		ldrb	r3, [r3]
 449 02ec DBB2     		uxtb	r3, r3
 450 02ee 0133     		adds	r3, r3, #1
 451 02f0 DAB2     		uxtb	r2, r3
 452 02f2 394B     		ldr	r3, .L36+4
 453 02f4 1A70     		strb	r2, [r3]
 254:.\Generated_Source\PSoC5/I2C_INT.c **** 
 255:.\Generated_Source\PSoC5/I2C_INT.c ****                 /* Check if end of buffer */
 256:.\Generated_Source\PSoC5/I2C_INT.c ****                 if(I2C_mstrRdBufIndex < I2C_mstrRdBufSize)
 454              		.loc 1 256 0
 455 02f6 384B     		ldr	r3, .L36+4
 456 02f8 1B78     		ldrb	r3, [r3]
 457 02fa DAB2     		uxtb	r2, r3
 458 02fc 384B     		ldr	r3, .L36+12
 459 02fe 1B78     		ldrb	r3, [r3]
 460 0300 DBB2     		uxtb	r3, r3
 461 0302 9A42     		cmp	r2, r3
 462 0304 09D2     		bcs	.L27
 257:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 258:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_ACK_AND_RECEIVE;       /* ACK and receive byte */
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 14


 463              		.loc 1 258 0
 464 0306 374B     		ldr	r3, .L36+16
 465 0308 0222     		movs	r2, #2
 466 030a 1A70     		strb	r2, [r3]
 467 030c 364B     		ldr	r3, .L36+20
 468 030e FF22     		movs	r2, #255
 469 0310 1A70     		strb	r2, [r3]
 470 0312 364B     		ldr	r3, .L36+24
 471 0314 0022     		movs	r2, #0
 472 0316 1A70     		strb	r2, [r3]
 473 0318 27E0     		b	.L28
 474              	.L27:
 259:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 260:.\Generated_Source\PSoC5/I2C_INT.c ****                 /* End of buffer: complete reading */
 261:.\Generated_Source\PSoC5/I2C_INT.c ****                 else if(I2C_CHECK_NO_STOP(I2C_mstrControl))
 475              		.loc 1 261 0
 476 031a 354B     		ldr	r3, .L36+28
 477 031c 1B78     		ldrb	r3, [r3]
 478 031e DBB2     		uxtb	r3, r3
 479 0320 03F00203 		and	r3, r3, #2
 480 0324 002B     		cmp	r3, #0
 481 0326 0ED0     		beq	.L29
 262:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 263:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Set read complete and master halted */
 264:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_mstrStatus |= (I2C_MSTAT_XFER_HALT |
 482              		.loc 1 264 0
 483 0328 324B     		ldr	r3, .L36+32
 484 032a 1B78     		ldrb	r3, [r3]
 485 032c DBB2     		uxtb	r3, r3
 486 032e 43F00903 		orr	r3, r3, #9
 487 0332 DAB2     		uxtb	r2, r3
 488 0334 2F4B     		ldr	r3, .L36+32
 489 0336 1A70     		strb	r2, [r3]
 265:.\Generated_Source\PSoC5/I2C_INT.c ****                                                     I2C_MSTAT_RD_CMPLT);
 266:.\Generated_Source\PSoC5/I2C_INT.c **** 
 267:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_state = I2C_SM_MSTR_HALT;    /* Expect ReStart */
 490              		.loc 1 267 0
 491 0338 2F4B     		ldr	r3, .L36+36
 492 033a 6022     		movs	r2, #96
 493 033c 1A70     		strb	r2, [r3]
 268:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_DisableInt();
 494              		.loc 1 268 0
 495 033e 2F4B     		ldr	r3, .L36+40
 496 0340 1022     		movs	r2, #16
 497 0342 1A60     		str	r2, [r3]
 498 0344 11E0     		b	.L28
 499              	.L29:
 269:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 270:.\Generated_Source\PSoC5/I2C_INT.c ****                 else
 271:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 272:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_ENABLE_INT_ON_STOP;
 500              		.loc 1 272 0
 501 0346 2E4B     		ldr	r3, .L36+44
 502 0348 2D4A     		ldr	r2, .L36+44
 503 034a 1278     		ldrb	r2, [r2]
 504 034c D2B2     		uxtb	r2, r2
 505 034e 42F02002 		orr	r2, r2, #32
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 15


 506 0352 D2B2     		uxtb	r2, r2
 507 0354 1A70     		strb	r2, [r3]
 273:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_NAK_AND_RECEIVE;       /* NACK and TRY to generate Stop */
 508              		.loc 1 273 0
 509 0356 234B     		ldr	r3, .L36+16
 510 0358 1222     		movs	r2, #18
 511 035a 1A70     		strb	r2, [r3]
 512 035c 224B     		ldr	r3, .L36+20
 513 035e FF22     		movs	r2, #255
 514 0360 1A70     		strb	r2, [r3]
 515 0362 224B     		ldr	r3, .L36+24
 516 0364 0022     		movs	r2, #0
 517 0366 1A70     		strb	r2, [r3]
 274:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 275:.\Generated_Source\PSoC5/I2C_INT.c ****                 break;
 518              		.loc 1 275 0
 519 0368 04E0     		b	.L3
 520              	.L28:
 521 036a 03E0     		b	.L3
 522              	.L4:
 276:.\Generated_Source\PSoC5/I2C_INT.c **** 
 277:.\Generated_Source\PSoC5/I2C_INT.c ****             default: /* This is an invalid state and should not occur */
 278:.\Generated_Source\PSoC5/I2C_INT.c **** 
 279:.\Generated_Source\PSoC5/I2C_INT.c ****             #if(I2C_TIMEOUT_ENABLED)
 280:.\Generated_Source\PSoC5/I2C_INT.c ****                 /* Exit interrupt to take chance for timeout timer to handles this case */
 281:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_DisableInt();
 282:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_ClearPendingInt();
 283:.\Generated_Source\PSoC5/I2C_INT.c ****             #else
 284:.\Generated_Source\PSoC5/I2C_INT.c ****                 /* Block execution flow: unexpected condition */
 285:.\Generated_Source\PSoC5/I2C_INT.c ****                 CYASSERT(0u != 0u);
 523              		.loc 1 285 0
 524 036c 0020     		movs	r0, #0
 525 036e FFF7FEFF 		bl	CyHalt
 286:.\Generated_Source\PSoC5/I2C_INT.c ****             #endif /* (I2C_TIMEOUT_ENABLED) */
 287:.\Generated_Source\PSoC5/I2C_INT.c **** 
 288:.\Generated_Source\PSoC5/I2C_INT.c ****                 break;
 526              		.loc 1 288 0
 527 0372 00BF     		nop
 528              	.L3:
 289:.\Generated_Source\PSoC5/I2C_INT.c ****             }
 290:.\Generated_Source\PSoC5/I2C_INT.c ****         }
 291:.\Generated_Source\PSoC5/I2C_INT.c **** 
 292:.\Generated_Source\PSoC5/I2C_INT.c ****         /* Catches Stop: end of transaction */
 293:.\Generated_Source\PSoC5/I2C_INT.c ****         if(I2C_CHECK_STOP_STS(tmpCsr))
 529              		.loc 1 293 0
 530 0374 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 531 0376 03F02003 		and	r3, r3, #32
 532 037a 002B     		cmp	r3, #0
 533 037c 27D0     		beq	.L1
 294:.\Generated_Source\PSoC5/I2C_INT.c ****         {
 295:.\Generated_Source\PSoC5/I2C_INT.c ****             I2C_mstrStatus |= I2C_GET_MSTAT_CMPLT;
 534              		.loc 1 295 0
 535 037e 1E4B     		ldr	r3, .L36+36
 536 0380 1B78     		ldrb	r3, [r3]
 537 0382 DBB2     		uxtb	r3, r3
 538 0384 03F00803 		and	r3, r3, #8
 539 0388 002B     		cmp	r3, #0
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 16


 540 038a 01D0     		beq	.L31
 541              		.loc 1 295 0 is_stmt 0 discriminator 1
 542 038c 0123     		movs	r3, #1
 543 038e 00E0     		b	.L32
 544              	.L31:
 545              		.loc 1 295 0 discriminator 2
 546 0390 0223     		movs	r3, #2
 547              	.L32:
 548              		.loc 1 295 0 discriminator 3
 549 0392 184A     		ldr	r2, .L36+32
 550 0394 1278     		ldrb	r2, [r2]
 551 0396 D2B2     		uxtb	r2, r2
 552 0398 1343     		orrs	r3, r3, r2
 553 039a DAB2     		uxtb	r2, r3
 554 039c 154B     		ldr	r3, .L36+32
 555 039e 1A70     		strb	r2, [r3]
 296:.\Generated_Source\PSoC5/I2C_INT.c **** 
 297:.\Generated_Source\PSoC5/I2C_INT.c ****             I2C_DISABLE_INT_ON_STOP;
 556              		.loc 1 297 0 is_stmt 1 discriminator 3
 557 03a0 174B     		ldr	r3, .L36+44
 558 03a2 174A     		ldr	r2, .L36+44
 559 03a4 1278     		ldrb	r2, [r2]
 560 03a6 D2B2     		uxtb	r2, r2
 561 03a8 22F02002 		bic	r2, r2, #32
 562 03ac D2B2     		uxtb	r2, r2
 563 03ae 1A70     		strb	r2, [r3]
 298:.\Generated_Source\PSoC5/I2C_INT.c ****             I2C_state = I2C_SM_IDLE;
 564              		.loc 1 298 0 discriminator 3
 565 03b0 114B     		ldr	r3, .L36+36
 566 03b2 1022     		movs	r2, #16
 567 03b4 1A70     		strb	r2, [r3]
 568 03b6 0AE0     		b	.L1
 569              	.L2:
 299:.\Generated_Source\PSoC5/I2C_INT.c ****         }
 300:.\Generated_Source\PSoC5/I2C_INT.c ****     #endif /* (I2C_MODE_MASTER_ENABLED) */
 301:.\Generated_Source\PSoC5/I2C_INT.c ****     }
 302:.\Generated_Source\PSoC5/I2C_INT.c ****     else if(I2C_CHECK_SM_SLAVE)
 570              		.loc 1 302 0
 571 03b8 0F4B     		ldr	r3, .L36+36
 572 03ba 1B78     		ldrb	r3, [r3]
 573 03bc DBB2     		uxtb	r3, r3
 574 03be 03F01003 		and	r3, r3, #16
 575 03c2 DBB2     		uxtb	r3, r3
 576 03c4 002B     		cmp	r3, #0
 577 03c6 02D1     		bne	.L1
 303:.\Generated_Source\PSoC5/I2C_INT.c ****     {
 304:.\Generated_Source\PSoC5/I2C_INT.c ****     #if(I2C_MODE_SLAVE_ENABLED)
 305:.\Generated_Source\PSoC5/I2C_INT.c **** 
 306:.\Generated_Source\PSoC5/I2C_INT.c ****         if((I2C_CHECK_STOP_STS(tmpCsr)) || /* Stop || Restart */
 307:.\Generated_Source\PSoC5/I2C_INT.c ****            (I2C_CHECK_BYTE_COMPLETE(tmpCsr) && I2C_CHECK_ADDRESS_STS(tmpCsr)))
 308:.\Generated_Source\PSoC5/I2C_INT.c ****         {
 309:.\Generated_Source\PSoC5/I2C_INT.c ****             /* Catch end of master write transaction: use interrupt on Stop */
 310:.\Generated_Source\PSoC5/I2C_INT.c ****             /* The Stop bit history on address phase does not have correct state */
 311:.\Generated_Source\PSoC5/I2C_INT.c ****             if(I2C_SM_SL_WR_DATA == I2C_state)
 312:.\Generated_Source\PSoC5/I2C_INT.c ****             {
 313:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_DISABLE_INT_ON_STOP;
 314:.\Generated_Source\PSoC5/I2C_INT.c **** 
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 17


 315:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_slStatus &= ((uint8) ~I2C_SSTAT_WR_BUSY);
 316:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_slStatus |= ((uint8)  I2C_SSTAT_WR_CMPLT);
 317:.\Generated_Source\PSoC5/I2C_INT.c **** 
 318:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_state = I2C_SM_IDLE;
 319:.\Generated_Source\PSoC5/I2C_INT.c ****             }
 320:.\Generated_Source\PSoC5/I2C_INT.c ****         }
 321:.\Generated_Source\PSoC5/I2C_INT.c **** 
 322:.\Generated_Source\PSoC5/I2C_INT.c ****         if(I2C_CHECK_BYTE_COMPLETE(tmpCsr))
 323:.\Generated_Source\PSoC5/I2C_INT.c ****         {
 324:.\Generated_Source\PSoC5/I2C_INT.c ****             /* The address only issued after Start or ReStart: so check the address
 325:.\Generated_Source\PSoC5/I2C_INT.c ****                to catch these events:
 326:.\Generated_Source\PSoC5/I2C_INT.c ****                 FF : sets an address phase with a byte_complete interrupt trigger.
 327:.\Generated_Source\PSoC5/I2C_INT.c ****                 UDB: sets an address phase immediately after Start or ReStart. */
 328:.\Generated_Source\PSoC5/I2C_INT.c ****             if(I2C_CHECK_ADDRESS_STS(tmpCsr))
 329:.\Generated_Source\PSoC5/I2C_INT.c ****             {
 330:.\Generated_Source\PSoC5/I2C_INT.c ****             /* Check for software address detection */
 331:.\Generated_Source\PSoC5/I2C_INT.c ****             #if(I2C_SW_ADRR_DECODE)
 332:.\Generated_Source\PSoC5/I2C_INT.c ****                 tmp8 = I2C_GET_SLAVE_ADDR(I2C_DATA_REG);
 333:.\Generated_Source\PSoC5/I2C_INT.c **** 
 334:.\Generated_Source\PSoC5/I2C_INT.c ****                 if(tmp8 == I2C_slAddress)   /* Check for address match */
 335:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 336:.\Generated_Source\PSoC5/I2C_INT.c ****                     if(0u != (I2C_DATA_REG & I2C_READ_FLAG))
 337:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 338:.\Generated_Source\PSoC5/I2C_INT.c ****                         /* Place code to prepare read buffer here                  */
 339:.\Generated_Source\PSoC5/I2C_INT.c ****                         /* `#START I2C_SW_PREPARE_READ_BUF_interrupt` */
 340:.\Generated_Source\PSoC5/I2C_INT.c **** 
 341:.\Generated_Source\PSoC5/I2C_INT.c ****                         /* `#END` */
 342:.\Generated_Source\PSoC5/I2C_INT.c **** 
 343:.\Generated_Source\PSoC5/I2C_INT.c ****                         /* Prepare next operation to read, get data and place in data register */
 344:.\Generated_Source\PSoC5/I2C_INT.c ****                         if(I2C_slRdBufIndex < I2C_slRdBufSize)
 345:.\Generated_Source\PSoC5/I2C_INT.c ****                         {
 346:.\Generated_Source\PSoC5/I2C_INT.c ****                             /* Load first data byte from array */
 347:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_DATA_REG = I2C_slRdBufPtr[I2C_slRdBufIndex];
 348:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_ACK_AND_TRANSMIT;
 349:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_slRdBufIndex++;
 350:.\Generated_Source\PSoC5/I2C_INT.c **** 
 351:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_slStatus |= I2C_SSTAT_RD_BUSY;
 352:.\Generated_Source\PSoC5/I2C_INT.c ****                         }
 353:.\Generated_Source\PSoC5/I2C_INT.c ****                         else    /* Overflow: provide 0xFF on bus */
 354:.\Generated_Source\PSoC5/I2C_INT.c ****                         {
 355:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_DATA_REG = I2C_OVERFLOW_RETURN;
 356:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_ACK_AND_TRANSMIT;
 357:.\Generated_Source\PSoC5/I2C_INT.c **** 
 358:.\Generated_Source\PSoC5/I2C_INT.c ****                             I2C_slStatus  |= (I2C_SSTAT_RD_BUSY |
 359:.\Generated_Source\PSoC5/I2C_INT.c ****                                                            I2C_SSTAT_RD_ERR_OVFL);
 360:.\Generated_Source\PSoC5/I2C_INT.c ****                         }
 361:.\Generated_Source\PSoC5/I2C_INT.c **** 
 362:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_state = I2C_SM_SL_RD_DATA;
 363:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 364:.\Generated_Source\PSoC5/I2C_INT.c ****                     else  /* Write transaction: receive 1st byte */
 365:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 366:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_ACK_AND_RECEIVE;
 367:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_state = I2C_SM_SL_WR_DATA;
 368:.\Generated_Source\PSoC5/I2C_INT.c **** 
 369:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_slStatus |= I2C_SSTAT_WR_BUSY;
 370:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_ENABLE_INT_ON_STOP;
 371:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 18


 372:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 373:.\Generated_Source\PSoC5/I2C_INT.c ****                 else
 374:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 375:.\Generated_Source\PSoC5/I2C_INT.c ****                     /*     Place code to compare for additional address here    */
 376:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* `#START I2C_SW_ADDR_COMPARE_interruptStart` */
 377:.\Generated_Source\PSoC5/I2C_INT.c **** 
 378:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* `#END` */
 379:.\Generated_Source\PSoC5/I2C_INT.c **** 
 380:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_NAK_AND_RECEIVE;   /* NACK address */
 381:.\Generated_Source\PSoC5/I2C_INT.c **** 
 382:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Place code to end of condition for NACK generation here */
 383:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* `#START I2C_SW_ADDR_COMPARE_interruptEnd`  */
 384:.\Generated_Source\PSoC5/I2C_INT.c **** 
 385:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* `#END` */
 386:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 387:.\Generated_Source\PSoC5/I2C_INT.c **** 
 388:.\Generated_Source\PSoC5/I2C_INT.c ****             #else /* (I2C_HW_ADRR_DECODE) */
 389:.\Generated_Source\PSoC5/I2C_INT.c **** 
 390:.\Generated_Source\PSoC5/I2C_INT.c ****                 if(0u != (I2C_DATA_REG & I2C_READ_FLAG))
 391:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 392:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Place code to prepare read buffer here                  */
 393:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* `#START I2C_HW_PREPARE_READ_BUF_interrupt` */
 394:.\Generated_Source\PSoC5/I2C_INT.c **** 
 395:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* `#END` */
 396:.\Generated_Source\PSoC5/I2C_INT.c **** 
 397:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Prepare next operation to read, get data and place in data register */
 398:.\Generated_Source\PSoC5/I2C_INT.c ****                     if(I2C_slRdBufIndex < I2C_slRdBufSize)
 399:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 400:.\Generated_Source\PSoC5/I2C_INT.c ****                         /* Load first data byte from array */
 401:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_DATA_REG = I2C_slRdBufPtr[I2C_slRdBufIndex];
 402:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_ACK_AND_TRANSMIT;
 403:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_slRdBufIndex++;
 404:.\Generated_Source\PSoC5/I2C_INT.c **** 
 405:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_slStatus |= I2C_SSTAT_RD_BUSY;
 406:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 407:.\Generated_Source\PSoC5/I2C_INT.c ****                     else    /* Overflow: provide 0xFF on bus */
 408:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 409:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_DATA_REG = I2C_OVERFLOW_RETURN;
 410:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_ACK_AND_TRANSMIT;
 411:.\Generated_Source\PSoC5/I2C_INT.c **** 
 412:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_slStatus  |= (I2C_SSTAT_RD_BUSY |
 413:.\Generated_Source\PSoC5/I2C_INT.c ****                                                        I2C_SSTAT_RD_ERR_OVFL);
 414:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 415:.\Generated_Source\PSoC5/I2C_INT.c **** 
 416:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_state = I2C_SM_SL_RD_DATA;
 417:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 418:.\Generated_Source\PSoC5/I2C_INT.c ****                 else  /* Write transaction: receive 1st byte */
 419:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 420:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_ACK_AND_RECEIVE;
 421:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_state = I2C_SM_SL_WR_DATA;
 422:.\Generated_Source\PSoC5/I2C_INT.c **** 
 423:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_slStatus |= I2C_SSTAT_WR_BUSY;
 424:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_ENABLE_INT_ON_STOP;
 425:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 426:.\Generated_Source\PSoC5/I2C_INT.c **** 
 427:.\Generated_Source\PSoC5/I2C_INT.c ****             #endif /* (I2C_SW_ADRR_DECODE) */
 428:.\Generated_Source\PSoC5/I2C_INT.c ****             }
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 19


 429:.\Generated_Source\PSoC5/I2C_INT.c ****             /* Data states */
 430:.\Generated_Source\PSoC5/I2C_INT.c ****             /* Data master writes into slave */
 431:.\Generated_Source\PSoC5/I2C_INT.c ****             else if(I2C_state == I2C_SM_SL_WR_DATA)
 432:.\Generated_Source\PSoC5/I2C_INT.c ****             {
 433:.\Generated_Source\PSoC5/I2C_INT.c ****                 if(I2C_slWrBufIndex < I2C_slWrBufSize)
 434:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 435:.\Generated_Source\PSoC5/I2C_INT.c ****                     tmp8 = I2C_DATA_REG;
 436:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_ACK_AND_RECEIVE;
 437:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_slWrBufPtr[I2C_slWrBufIndex] = tmp8;
 438:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_slWrBufIndex++;
 439:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 440:.\Generated_Source\PSoC5/I2C_INT.c ****                 else  /* of array: complete write, send NACK */
 441:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 442:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_NAK_AND_RECEIVE;
 443:.\Generated_Source\PSoC5/I2C_INT.c **** 
 444:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_slStatus |= I2C_SSTAT_WR_ERR_OVFL;
 445:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 446:.\Generated_Source\PSoC5/I2C_INT.c ****             }
 447:.\Generated_Source\PSoC5/I2C_INT.c ****             /* Data master reads from slave */
 448:.\Generated_Source\PSoC5/I2C_INT.c ****             else if(I2C_state == I2C_SM_SL_RD_DATA)
 449:.\Generated_Source\PSoC5/I2C_INT.c ****             {
 450:.\Generated_Source\PSoC5/I2C_INT.c ****                 if(I2C_CHECK_DATA_ACK(tmpCsr))
 451:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 452:.\Generated_Source\PSoC5/I2C_INT.c ****                     if(I2C_slRdBufIndex < I2C_slRdBufSize)
 453:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 454:.\Generated_Source\PSoC5/I2C_INT.c ****                          /* Get data from array */
 455:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_DATA_REG = I2C_slRdBufPtr[I2C_slRdBufIndex];
 456:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_TRANSMIT_DATA;
 457:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_slRdBufIndex++;
 458:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 459:.\Generated_Source\PSoC5/I2C_INT.c ****                     else   /* Overflow: provide 0xFF on bus */
 460:.\Generated_Source\PSoC5/I2C_INT.c ****                     {
 461:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_DATA_REG = I2C_OVERFLOW_RETURN;
 462:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_TRANSMIT_DATA;
 463:.\Generated_Source\PSoC5/I2C_INT.c **** 
 464:.\Generated_Source\PSoC5/I2C_INT.c ****                         I2C_slStatus |= I2C_SSTAT_RD_ERR_OVFL;
 465:.\Generated_Source\PSoC5/I2C_INT.c ****                     }
 466:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 467:.\Generated_Source\PSoC5/I2C_INT.c ****                 else  /* Last byte was NACKed: read complete */
 468:.\Generated_Source\PSoC5/I2C_INT.c ****                 {
 469:.\Generated_Source\PSoC5/I2C_INT.c ****                     /* Only NACK appears on bus */
 470:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_DATA_REG = I2C_OVERFLOW_RETURN;
 471:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_NAK_AND_TRANSMIT;
 472:.\Generated_Source\PSoC5/I2C_INT.c **** 
 473:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_slStatus &= ((uint8) ~I2C_SSTAT_RD_BUSY);
 474:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_slStatus |= ((uint8)  I2C_SSTAT_RD_CMPLT);
 475:.\Generated_Source\PSoC5/I2C_INT.c **** 
 476:.\Generated_Source\PSoC5/I2C_INT.c ****                     I2C_state = I2C_SM_IDLE;
 477:.\Generated_Source\PSoC5/I2C_INT.c ****                 }
 478:.\Generated_Source\PSoC5/I2C_INT.c ****             }
 479:.\Generated_Source\PSoC5/I2C_INT.c ****             else
 480:.\Generated_Source\PSoC5/I2C_INT.c ****             {
 481:.\Generated_Source\PSoC5/I2C_INT.c ****             #if(I2C_TIMEOUT_ENABLED)
 482:.\Generated_Source\PSoC5/I2C_INT.c ****                 /* Exit interrupt to take chance for timeout timer to handle this case */
 483:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_DisableInt();
 484:.\Generated_Source\PSoC5/I2C_INT.c ****                 I2C_ClearPendingInt();
 485:.\Generated_Source\PSoC5/I2C_INT.c ****             #else
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 20


 486:.\Generated_Source\PSoC5/I2C_INT.c ****                 /* Block execution flow: unexpected condition */
 487:.\Generated_Source\PSoC5/I2C_INT.c ****                 CYASSERT(0u != 0u);
 488:.\Generated_Source\PSoC5/I2C_INT.c ****             #endif /* (I2C_TIMEOUT_ENABLED) */
 489:.\Generated_Source\PSoC5/I2C_INT.c ****             }
 490:.\Generated_Source\PSoC5/I2C_INT.c ****         }
 491:.\Generated_Source\PSoC5/I2C_INT.c ****     #endif /* (I2C_MODE_SLAVE_ENABLED) */
 492:.\Generated_Source\PSoC5/I2C_INT.c ****     }
 493:.\Generated_Source\PSoC5/I2C_INT.c ****     else
 494:.\Generated_Source\PSoC5/I2C_INT.c ****     {
 495:.\Generated_Source\PSoC5/I2C_INT.c ****         /* The FSM skips master and slave processing: return to IDLE */
 496:.\Generated_Source\PSoC5/I2C_INT.c ****         I2C_state = I2C_SM_IDLE;
 578              		.loc 1 496 0
 579 03c8 0B4B     		ldr	r3, .L36+36
 580 03ca 1022     		movs	r2, #16
 581 03cc 1A70     		strb	r2, [r3]
 582              	.L1:
 497:.\Generated_Source\PSoC5/I2C_INT.c ****     }
 498:.\Generated_Source\PSoC5/I2C_INT.c **** }
 583              		.loc 1 498 0
 584 03ce 0837     		adds	r7, r7, #8
 585 03d0 BD46     		mov	sp, r7
 586              		@ sp needed
 587 03d2 80BD     		pop	{r7, pc}
 588              	.L37:
 589              		.align	2
 590              	.L36:
 591 03d4 00000000 		.word	I2C_mstrRdBufPtr
 592 03d8 00000000 		.word	I2C_mstrRdBufIndex
 593 03dc 0F640040 		.word	1073767439
 594 03e0 00000000 		.word	I2C_mstrRdBufSize
 595 03e4 73640040 		.word	1073767539
 596 03e8 1F640040 		.word	1073767455
 597 03ec 5F640040 		.word	1073767519
 598 03f0 00000000 		.word	I2C_mstrControl
 599 03f4 00000000 		.word	I2C_mstrStatus
 600 03f8 00000000 		.word	I2C_state
 601 03fc 80E100E0 		.word	-536813184
 602 0400 8B640040 		.word	1073767563
 603              		.cfi_endproc
 604              	.LFE0:
 605              		.size	I2C_ISR, .-I2C_ISR
 606              		.text
 607              	.Letext0:
 608              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 609              		.file 3 ".\\Generated_Source\\PSoC5\\I2C_PVT.h"
 610              		.section	.debug_info,"",%progbits
 611              	.Ldebug_info0:
 612 0000 49010000 		.4byte	0x149
 613 0004 0400     		.2byte	0x4
 614 0006 00000000 		.4byte	.Ldebug_abbrev0
 615 000a 04       		.byte	0x4
 616 000b 01       		.uleb128 0x1
 617 000c 37010000 		.4byte	.LASF26
 618 0010 01       		.byte	0x1
 619 0011 0D000000 		.4byte	.LASF27
 620 0015 8C000000 		.4byte	.LASF28
 621 0019 00000000 		.4byte	.Ldebug_ranges0+0
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 21


 622 001d 00000000 		.4byte	0
 623 0021 00000000 		.4byte	.Ldebug_line0
 624 0025 02       		.uleb128 0x2
 625 0026 01       		.byte	0x1
 626 0027 06       		.byte	0x6
 627 0028 6D000000 		.4byte	.LASF0
 628 002c 02       		.uleb128 0x2
 629 002d 01       		.byte	0x1
 630 002e 08       		.byte	0x8
 631 002f 79000000 		.4byte	.LASF1
 632 0033 02       		.uleb128 0x2
 633 0034 02       		.byte	0x2
 634 0035 05       		.byte	0x5
 635 0036 CF010000 		.4byte	.LASF2
 636 003a 02       		.uleb128 0x2
 637 003b 02       		.byte	0x2
 638 003c 07       		.byte	0x7
 639 003d 41000000 		.4byte	.LASF3
 640 0041 02       		.uleb128 0x2
 641 0042 04       		.byte	0x4
 642 0043 05       		.byte	0x5
 643 0044 01020000 		.4byte	.LASF4
 644 0048 02       		.uleb128 0x2
 645 0049 04       		.byte	0x4
 646 004a 07       		.byte	0x7
 647 004b DB000000 		.4byte	.LASF5
 648 004f 02       		.uleb128 0x2
 649 0050 08       		.byte	0x8
 650 0051 05       		.byte	0x5
 651 0052 BC010000 		.4byte	.LASF6
 652 0056 02       		.uleb128 0x2
 653 0057 08       		.byte	0x8
 654 0058 07       		.byte	0x7
 655 0059 20010000 		.4byte	.LASF7
 656 005d 03       		.uleb128 0x3
 657 005e 04       		.byte	0x4
 658 005f 05       		.byte	0x5
 659 0060 696E7400 		.ascii	"int\000"
 660 0064 02       		.uleb128 0x2
 661 0065 04       		.byte	0x4
 662 0066 07       		.byte	0x7
 663 0067 13010000 		.4byte	.LASF8
 664 006b 04       		.uleb128 0x4
 665 006c ED000000 		.4byte	.LASF9
 666 0070 02       		.byte	0x2
 667 0071 B3       		.byte	0xb3
 668 0072 2C000000 		.4byte	0x2c
 669 0076 04       		.uleb128 0x4
 670 0077 FA000000 		.4byte	.LASF10
 671 007b 02       		.byte	0x2
 672 007c B5       		.byte	0xb5
 673 007d 48000000 		.4byte	0x48
 674 0081 02       		.uleb128 0x2
 675 0082 04       		.byte	0x4
 676 0083 04       		.byte	0x4
 677 0084 67000000 		.4byte	.LASF11
 678 0088 02       		.uleb128 0x2
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 22


 679 0089 08       		.byte	0x8
 680 008a 04       		.byte	0x4
 681 008b F3000000 		.4byte	.LASF12
 682 008f 02       		.uleb128 0x2
 683 0090 01       		.byte	0x1
 684 0091 08       		.byte	0x8
 685 0092 CA010000 		.4byte	.LASF13
 686 0096 05       		.uleb128 0x5
 687 0097 87000000 		.4byte	.LASF14
 688 009b 02       		.byte	0x2
 689 009c 5D01     		.2byte	0x15d
 690 009e A2000000 		.4byte	0xa2
 691 00a2 06       		.uleb128 0x6
 692 00a3 6B000000 		.4byte	0x6b
 693 00a7 05       		.uleb128 0x5
 694 00a8 07000000 		.4byte	.LASF15
 695 00ac 02       		.byte	0x2
 696 00ad 5F01     		.2byte	0x15f
 697 00af B3000000 		.4byte	0xb3
 698 00b3 06       		.uleb128 0x6
 699 00b4 76000000 		.4byte	0x76
 700 00b8 02       		.uleb128 0x2
 701 00b9 04       		.byte	0x4
 702 00ba 07       		.byte	0x7
 703 00bb B3010000 		.4byte	.LASF16
 704 00bf 07       		.uleb128 0x7
 705 00c0 D9010000 		.4byte	.LASF29
 706 00c4 01       		.byte	0x1
 707 00c5 2D       		.byte	0x2d
 708 00c6 00000000 		.4byte	.LFB0
 709 00ca 04040000 		.4byte	.LFE0-.LFB0
 710 00ce 01       		.uleb128 0x1
 711 00cf 9C       		.byte	0x9c
 712 00d0 E3000000 		.4byte	0xe3
 713 00d4 08       		.uleb128 0x8
 714 00d5 00000000 		.4byte	.LASF30
 715 00d9 01       		.byte	0x1
 716 00da 33       		.byte	0x33
 717 00db 6B000000 		.4byte	0x6b
 718 00df 02       		.uleb128 0x2
 719 00e0 91       		.byte	0x91
 720 00e1 77       		.sleb128 -9
 721 00e2 00       		.byte	0
 722 00e3 09       		.uleb128 0x9
 723 00e4 0A020000 		.4byte	.LASF17
 724 00e8 03       		.byte	0x3
 725 00e9 23       		.byte	0x23
 726 00ea A2000000 		.4byte	0xa2
 727 00ee 09       		.uleb128 0x9
 728 00ef E1010000 		.4byte	.LASF18
 729 00f3 03       		.byte	0x3
 730 00f4 27       		.byte	0x27
 731 00f5 A2000000 		.4byte	0xa2
 732 00f9 09       		.uleb128 0x9
 733 00fa 39020000 		.4byte	.LASF19
 734 00fe 03       		.byte	0x3
 735 00ff 28       		.byte	0x28
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 23


 736 0100 A2000000 		.4byte	0xa2
 737 0104 09       		.uleb128 0x9
 738 0105 F0010000 		.4byte	.LASF20
 739 0109 03       		.byte	0x3
 740 010a 2B       		.byte	0x2b
 741 010b 0F010000 		.4byte	0x10f
 742 010f 0A       		.uleb128 0xa
 743 0110 04       		.byte	0x4
 744 0111 A2000000 		.4byte	0xa2
 745 0115 09       		.uleb128 0x9
 746 0116 01010000 		.4byte	.LASF21
 747 011a 03       		.byte	0x3
 748 011b 2C       		.byte	0x2c
 749 011c A2000000 		.4byte	0xa2
 750 0120 09       		.uleb128 0x9
 751 0121 54000000 		.4byte	.LASF22
 752 0125 03       		.byte	0x3
 753 0126 2D       		.byte	0x2d
 754 0127 A2000000 		.4byte	0xa2
 755 012b 09       		.uleb128 0x9
 756 012c 30000000 		.4byte	.LASF23
 757 0130 03       		.byte	0x3
 758 0131 30       		.byte	0x30
 759 0132 0F010000 		.4byte	0x10f
 760 0136 09       		.uleb128 0x9
 761 0137 27020000 		.4byte	.LASF24
 762 013b 03       		.byte	0x3
 763 013c 31       		.byte	0x31
 764 013d A2000000 		.4byte	0xa2
 765 0141 09       		.uleb128 0x9
 766 0142 14020000 		.4byte	.LASF25
 767 0146 03       		.byte	0x3
 768 0147 32       		.byte	0x32
 769 0148 A2000000 		.4byte	0xa2
 770 014c 00       		.byte	0
 771              		.section	.debug_abbrev,"",%progbits
 772              	.Ldebug_abbrev0:
 773 0000 01       		.uleb128 0x1
 774 0001 11       		.uleb128 0x11
 775 0002 01       		.byte	0x1
 776 0003 25       		.uleb128 0x25
 777 0004 0E       		.uleb128 0xe
 778 0005 13       		.uleb128 0x13
 779 0006 0B       		.uleb128 0xb
 780 0007 03       		.uleb128 0x3
 781 0008 0E       		.uleb128 0xe
 782 0009 1B       		.uleb128 0x1b
 783 000a 0E       		.uleb128 0xe
 784 000b 55       		.uleb128 0x55
 785 000c 17       		.uleb128 0x17
 786 000d 11       		.uleb128 0x11
 787 000e 01       		.uleb128 0x1
 788 000f 10       		.uleb128 0x10
 789 0010 17       		.uleb128 0x17
 790 0011 00       		.byte	0
 791 0012 00       		.byte	0
 792 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 24


 793 0014 24       		.uleb128 0x24
 794 0015 00       		.byte	0
 795 0016 0B       		.uleb128 0xb
 796 0017 0B       		.uleb128 0xb
 797 0018 3E       		.uleb128 0x3e
 798 0019 0B       		.uleb128 0xb
 799 001a 03       		.uleb128 0x3
 800 001b 0E       		.uleb128 0xe
 801 001c 00       		.byte	0
 802 001d 00       		.byte	0
 803 001e 03       		.uleb128 0x3
 804 001f 24       		.uleb128 0x24
 805 0020 00       		.byte	0
 806 0021 0B       		.uleb128 0xb
 807 0022 0B       		.uleb128 0xb
 808 0023 3E       		.uleb128 0x3e
 809 0024 0B       		.uleb128 0xb
 810 0025 03       		.uleb128 0x3
 811 0026 08       		.uleb128 0x8
 812 0027 00       		.byte	0
 813 0028 00       		.byte	0
 814 0029 04       		.uleb128 0x4
 815 002a 16       		.uleb128 0x16
 816 002b 00       		.byte	0
 817 002c 03       		.uleb128 0x3
 818 002d 0E       		.uleb128 0xe
 819 002e 3A       		.uleb128 0x3a
 820 002f 0B       		.uleb128 0xb
 821 0030 3B       		.uleb128 0x3b
 822 0031 0B       		.uleb128 0xb
 823 0032 49       		.uleb128 0x49
 824 0033 13       		.uleb128 0x13
 825 0034 00       		.byte	0
 826 0035 00       		.byte	0
 827 0036 05       		.uleb128 0x5
 828 0037 16       		.uleb128 0x16
 829 0038 00       		.byte	0
 830 0039 03       		.uleb128 0x3
 831 003a 0E       		.uleb128 0xe
 832 003b 3A       		.uleb128 0x3a
 833 003c 0B       		.uleb128 0xb
 834 003d 3B       		.uleb128 0x3b
 835 003e 05       		.uleb128 0x5
 836 003f 49       		.uleb128 0x49
 837 0040 13       		.uleb128 0x13
 838 0041 00       		.byte	0
 839 0042 00       		.byte	0
 840 0043 06       		.uleb128 0x6
 841 0044 35       		.uleb128 0x35
 842 0045 00       		.byte	0
 843 0046 49       		.uleb128 0x49
 844 0047 13       		.uleb128 0x13
 845 0048 00       		.byte	0
 846 0049 00       		.byte	0
 847 004a 07       		.uleb128 0x7
 848 004b 2E       		.uleb128 0x2e
 849 004c 01       		.byte	0x1
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 25


 850 004d 3F       		.uleb128 0x3f
 851 004e 19       		.uleb128 0x19
 852 004f 03       		.uleb128 0x3
 853 0050 0E       		.uleb128 0xe
 854 0051 3A       		.uleb128 0x3a
 855 0052 0B       		.uleb128 0xb
 856 0053 3B       		.uleb128 0x3b
 857 0054 0B       		.uleb128 0xb
 858 0055 27       		.uleb128 0x27
 859 0056 19       		.uleb128 0x19
 860 0057 11       		.uleb128 0x11
 861 0058 01       		.uleb128 0x1
 862 0059 12       		.uleb128 0x12
 863 005a 06       		.uleb128 0x6
 864 005b 40       		.uleb128 0x40
 865 005c 18       		.uleb128 0x18
 866 005d 9642     		.uleb128 0x2116
 867 005f 19       		.uleb128 0x19
 868 0060 01       		.uleb128 0x1
 869 0061 13       		.uleb128 0x13
 870 0062 00       		.byte	0
 871 0063 00       		.byte	0
 872 0064 08       		.uleb128 0x8
 873 0065 34       		.uleb128 0x34
 874 0066 00       		.byte	0
 875 0067 03       		.uleb128 0x3
 876 0068 0E       		.uleb128 0xe
 877 0069 3A       		.uleb128 0x3a
 878 006a 0B       		.uleb128 0xb
 879 006b 3B       		.uleb128 0x3b
 880 006c 0B       		.uleb128 0xb
 881 006d 49       		.uleb128 0x49
 882 006e 13       		.uleb128 0x13
 883 006f 02       		.uleb128 0x2
 884 0070 18       		.uleb128 0x18
 885 0071 00       		.byte	0
 886 0072 00       		.byte	0
 887 0073 09       		.uleb128 0x9
 888 0074 34       		.uleb128 0x34
 889 0075 00       		.byte	0
 890 0076 03       		.uleb128 0x3
 891 0077 0E       		.uleb128 0xe
 892 0078 3A       		.uleb128 0x3a
 893 0079 0B       		.uleb128 0xb
 894 007a 3B       		.uleb128 0x3b
 895 007b 0B       		.uleb128 0xb
 896 007c 49       		.uleb128 0x49
 897 007d 13       		.uleb128 0x13
 898 007e 3F       		.uleb128 0x3f
 899 007f 19       		.uleb128 0x19
 900 0080 3C       		.uleb128 0x3c
 901 0081 19       		.uleb128 0x19
 902 0082 00       		.byte	0
 903 0083 00       		.byte	0
 904 0084 0A       		.uleb128 0xa
 905 0085 0F       		.uleb128 0xf
 906 0086 00       		.byte	0
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 26


 907 0087 0B       		.uleb128 0xb
 908 0088 0B       		.uleb128 0xb
 909 0089 49       		.uleb128 0x49
 910 008a 13       		.uleb128 0x13
 911 008b 00       		.byte	0
 912 008c 00       		.byte	0
 913 008d 00       		.byte	0
 914              		.section	.debug_aranges,"",%progbits
 915 0000 1C000000 		.4byte	0x1c
 916 0004 0200     		.2byte	0x2
 917 0006 00000000 		.4byte	.Ldebug_info0
 918 000a 04       		.byte	0x4
 919 000b 00       		.byte	0
 920 000c 0000     		.2byte	0
 921 000e 0000     		.2byte	0
 922 0010 00000000 		.4byte	.LFB0
 923 0014 04040000 		.4byte	.LFE0-.LFB0
 924 0018 00000000 		.4byte	0
 925 001c 00000000 		.4byte	0
 926              		.section	.debug_ranges,"",%progbits
 927              	.Ldebug_ranges0:
 928 0000 00000000 		.4byte	.LFB0
 929 0004 04040000 		.4byte	.LFE0
 930 0008 00000000 		.4byte	0
 931 000c 00000000 		.4byte	0
 932              		.section	.debug_line,"",%progbits
 933              	.Ldebug_line0:
 934 0000 05010000 		.section	.debug_str,"MS",%progbits,1
 934      02005300 
 934      00000201 
 934      FB0E0D00 
 934      01010101 
 935              	.LASF30:
 936 0000 746D7043 		.ascii	"tmpCsr\000"
 936      737200
 937              	.LASF15:
 938 0007 72656733 		.ascii	"reg32\000"
 938      3200
 939              	.LASF27:
 940 000d 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\I2C_INT.c\000"
 940      6E657261 
 940      7465645F 
 940      536F7572 
 940      63655C50 
 941              	.LASF23:
 942 0030 4932435F 		.ascii	"I2C_mstrWrBufPtr\000"
 942      6D737472 
 942      57724275 
 942      66507472 
 942      00
 943              	.LASF3:
 944 0041 73686F72 		.ascii	"short unsigned int\000"
 944      7420756E 
 944      7369676E 
 944      65642069 
 944      6E7400
 945              	.LASF22:
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 27


 946 0054 4932435F 		.ascii	"I2C_mstrRdBufIndex\000"
 946      6D737472 
 946      52644275 
 946      66496E64 
 946      657800
 947              	.LASF11:
 948 0067 666C6F61 		.ascii	"float\000"
 948      7400
 949              	.LASF0:
 950 006d 7369676E 		.ascii	"signed char\000"
 950      65642063 
 950      68617200 
 951              	.LASF1:
 952 0079 756E7369 		.ascii	"unsigned char\000"
 952      676E6564 
 952      20636861 
 952      7200
 953              	.LASF14:
 954 0087 72656738 		.ascii	"reg8\000"
 954      00
 955              	.LASF28:
 956 008c 433A5C55 		.ascii	"C:\\Users\\xavieran\\Desktop\\ECE3091\\PSOCProjects"
 956      73657273 
 956      5C786176 
 956      69657261 
 956      6E5C4465 
 957 00ba 5C454E47 		.ascii	"\\ENG3091_MandM\\camera_test.cydsn\000"
 957      33303931 
 957      5F4D616E 
 957      644D5C63 
 957      616D6572 
 958              	.LASF5:
 959 00db 6C6F6E67 		.ascii	"long unsigned int\000"
 959      20756E73 
 959      69676E65 
 959      6420696E 
 959      7400
 960              	.LASF9:
 961 00ed 75696E74 		.ascii	"uint8\000"
 961      3800
 962              	.LASF12:
 963 00f3 646F7562 		.ascii	"double\000"
 963      6C6500
 964              	.LASF10:
 965 00fa 75696E74 		.ascii	"uint32\000"
 965      333200
 966              	.LASF21:
 967 0101 4932435F 		.ascii	"I2C_mstrRdBufSize\000"
 967      6D737472 
 967      52644275 
 967      6653697A 
 967      6500
 968              	.LASF8:
 969 0113 756E7369 		.ascii	"unsigned int\000"
 969      676E6564 
 969      20696E74 
 969      00
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 28


 970              	.LASF7:
 971 0120 6C6F6E67 		.ascii	"long long unsigned int\000"
 971      206C6F6E 
 971      6720756E 
 971      7369676E 
 971      65642069 
 972              	.LASF26:
 973 0137 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 973      4320342E 
 973      382E3420 
 973      32303134 
 973      30353236 
 974 016a 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m3 -mthumb -g -O"
 974      20726576 
 974      6973696F 
 974      6E203231 
 974      31333538 
 975 019d 30202D66 		.ascii	"0 -ffunction-sections\000"
 975      66756E63 
 975      74696F6E 
 975      2D736563 
 975      74696F6E 
 976              	.LASF16:
 977 01b3 73697A65 		.ascii	"sizetype\000"
 977      74797065 
 977      00
 978              	.LASF6:
 979 01bc 6C6F6E67 		.ascii	"long long int\000"
 979      206C6F6E 
 979      6720696E 
 979      7400
 980              	.LASF13:
 981 01ca 63686172 		.ascii	"char\000"
 981      00
 982              	.LASF2:
 983 01cf 73686F72 		.ascii	"short int\000"
 983      7420696E 
 983      7400
 984              	.LASF29:
 985 01d9 4932435F 		.ascii	"I2C_ISR\000"
 985      49535200 
 986              	.LASF18:
 987 01e1 4932435F 		.ascii	"I2C_mstrStatus\000"
 987      6D737472 
 987      53746174 
 987      757300
 988              	.LASF20:
 989 01f0 4932435F 		.ascii	"I2C_mstrRdBufPtr\000"
 989      6D737472 
 989      52644275 
 989      66507472 
 989      00
 990              	.LASF4:
 991 0201 6C6F6E67 		.ascii	"long int\000"
 991      20696E74 
 991      00
 992              	.LASF17:
ARM GAS  C:\Users\xavieran\AppData\Local\Temp\ccUmNEOH.s 			page 29


 993 020a 4932435F 		.ascii	"I2C_state\000"
 993      73746174 
 993      6500
 994              	.LASF25:
 995 0214 4932435F 		.ascii	"I2C_mstrWrBufIndex\000"
 995      6D737472 
 995      57724275 
 995      66496E64 
 995      657800
 996              	.LASF24:
 997 0227 4932435F 		.ascii	"I2C_mstrWrBufSize\000"
 997      6D737472 
 997      57724275 
 997      6653697A 
 997      6500
 998              	.LASF19:
 999 0239 4932435F 		.ascii	"I2C_mstrControl\000"
 999      6D737472 
 999      436F6E74 
 999      726F6C00 
 1000              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
